name: Build & Tests

on:
    push:
        branches:
            - main
    pull_request:
    schedule:
        - cron: '0 0 * * *' # runs at 00:00 UTC daily

env:
    # APP_IMAGE_TAG: latest # No longer fixed
    # APP_IMAGE: ghcr.io/codbex/codbex-athena:latest # Will be set dynamically
    REGISTRY: ghcr.io
    IMAGE_BASE_NAME: ${{ github.repository }} # e.g., codbex/codbex-athena

permissions:
    contents: read
    packages: write # Needed to build images in the repo scope

jobs:
    athena-integration-tests:
        runs-on: ubuntu-latest
        steps:
            - name: Setup Chrome
              uses: browser-actions/setup-chrome@v1.5.0
              with:
                  chrome-version: stable
            - if: runner.os == 'Linux'
              run: chrome --version
            - if: runner.os == 'macOS'
              run: '/Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome --version'
            - if: runner.os == 'Windows'
              run: (Get-Item (Get-Command chrome).Source).VersionInfo.ProductVersion
            - uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Cache local Maven repository
              uses: actions/cache@v4
              with:
                  path: ~/.m2/repository
                  key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
                  restore-keys: ${{ runner.os }}-maven-

            - name: Set up JDK Corretto 21
              uses: actions/setup-java@v4
              with:
                  distribution: 'corretto'
                  java-version: 21

            - name: Install NodeJS
              uses: actions/setup-node@v4
              with:
                  node-version: 18

            - name: Install Dependencies # Install dependencies needed for Docker build context
              run: npm install --prefix application

            # - name: Install esbuild # Not needed if build happens in Docker
            #   run: npm i -g esbuild

            # - name: Install TypeScript compiler # Not needed if build happens in Docker
            #   run: npm i -g typescript

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            # Login is not strictly required to build locally, but good practice if pushing later
            # - name: Log in to the Container registry
            #   uses: docker/login-action@v3
            #   with:
            #     registry: ${{ env.REGISTRY }}
            #     username: ${{ github.actor }}
            #     password: ${{ secrets.GITHUB_TOKEN }}

            - name: Build Docker image
              id: docker_build
              run: |
                  TAG=${{ github.sha }}
                  IMAGE_NAME=${{ env.REGISTRY }}/${{ env.IMAGE_BASE_NAME }}:$TAG
                  echo "Building image: $IMAGE_NAME"
                  docker build -t $IMAGE_NAME -f application/Dockerfile .
                  echo "BUILT_IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV # Set env var for subsequent steps

            - name: Integration tests
              env:
                  APP_IMAGE: ${{ env.BUILT_IMAGE_NAME }} # Pass the dynamically built image name
              run: mvn clean install -P integration-tests

            - name: Generate a random artifact name
              if: always()
              id: generate_name
              run: |
                  TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
                  echo "ARTIFACT_NAME=selenide-screenshots-${TIMESTAMP}.zip" >> $GITHUB_ENV

            - name: Upload selenide screenshots
              uses: actions/upload-artifact@v4
              if: always()
              with:
                  retention-days: 1
                  name: ${{ env.ARTIFACT_NAME }}
                  path: integration-tests/build/reports/tests
